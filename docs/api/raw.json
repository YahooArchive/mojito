{"majorversion": 3, "filemap": {"glob.js": {"classlist": [], "name": "glob.js", "module": "MojitoServer"}, "deploy.server.js": {"classlist": ["Deploy.server"], "name": "deploy.server.js", "module": "ActionContextAddon"}, "action-context.common.js": {"classlist": ["ActionContext"], "name": "action-context.common.js", "module": "ActionContextAddon"}, "output-handler.client.js": {"classlist": [], "name": "output-handler.client.js", "module": "MojitoClient"}, "config.common.js": {"classlist": ["Config.common"], "name": "config.common.js", "module": "ActionContextAddon"}, "intl.common.js": {"classlist": ["Intl.common"], "name": "intl.common.js", "module": "ActionContextAddon"}, "mojito.common.js": {"classlist": [], "name": "mojito.common.js", "module": "MojitoClient"}, "loader.common.js": {"classlist": [], "name": "loader.common.js", "module": "ActionContext"}, "carrier.server.js": {"classlist": ["Carrier.common"], "name": "carrier.server.js", "module": "ActionContextAddon"}, "device.server.js": {"classlist": ["Device.common"], "name": "device.server.js", "module": "ActionContextAddon"}, "response_processor.client-optional.js": {"classlist": [], "name": "response_processor.client-optional.js", "module": "CommonLibs"}, "request_formatter.client-optional.js": {"classlist": [], "name": "request_formatter.client-optional.js", "module": "CommonLibs"}, "mu.client.js": {"classlist": ["MuAdapterClient"], "name": "mu.client.js", "module": "ActionContextAddon"}, "view-renderer.common.js": {"classlist": [], "name": "view-renderer.common.js", "module": "CommonLibs"}, "mojito-test.common.js": {"classlist": [], "name": "mojito-test.common.js", "module": "MojitoClient"}, "io_facade.client-optional.js": {"classlist": [], "name": "io_facade.client-optional.js", "module": "CommonLibs"}, "transport_utils.client-optional.js": {"classlist": [], "name": "transport_utils.client-optional.js", "module": "CommonLibs"}, "output-handler.server.js": {"classlist": ["OutputHandler"], "name": "output-handler.server.js", "module": "MojitoServer"}, "mojit-proxy.client.js": {"classlist": ["MojitProxy"], "name": "mojit-proxy.client.js", "module": "ActionContext"}, "store-provider.server.js": {"classlist": [], "name": "store-provider.server.js", "module": "CommonLibs"}, "store.client.js": {"classlist": [], "name": "store.client.js", "module": "CommonLibs"}, "assets.common.js": {"classlist": ["Assets.common"], "name": "assets.common.js", "module": "ActionContextAddon"}, "rest.common.js": {"classlist": ["Y.mojito.lib.REST"], "name": "rest.common.js", "module": "MojitoClient"}, "dispatch.common.js": {"classlist": ["MojitoDispatcher"], "name": "dispatch.common.js", "module": "ActionContext"}, "cookie.server.js": {"classlist": ["Cookie.server"], "name": "cookie.server.js", "module": "ActionContextAddon"}, "meta.common.js": {"classlist": ["Meta.common"], "name": "meta.common.js", "module": "ActionContextAddon"}, "params.common.js": {"classlist": ["Params.common"], "name": "params.common.js", "module": "ActionContextAddon"}, "performance_monitor.client-optional.js": {"classlist": [], "name": "performance_monitor.client-optional.js", "module": "CommonLibs"}, "tunnel.client-optional.js": {"classlist": [], "name": "tunnel.client-optional.js", "module": "CommonLibs"}, "output-adapter.common.js": {"classlist": ["OutputAdapter.common"], "name": "output-adapter.common.js", "module": "ActionContextAddon"}, "request_handler.client-optional.js": {"classlist": [], "name": "request_handler.client-optional.js", "module": "CommonLibs"}, "util.common.js": {"classlist": [], "name": "util.common.js", "module": "CommonLibs"}, "response_formatter.client-optional.js": {"classlist": [], "name": "response_formatter.client-optional.js", "module": "CommonLibs"}, "transport.client-optional.js": {"classlist": [], "name": "transport.client-optional.js", "module": "CommonLibs"}, "controller.server.js": {"classlist": [], "name": "controller.server.js", "module": "CommonLibs"}, "requestor.client-optional.js": {"classlist": [], "name": "requestor.client-optional.js", "module": "CommonLibs"}, "logger.common.js": {"classlist": [], "name": "logger.common.js", "module": "ActionContext"}, "controller-context.common.js": {"classlist": [], "name": "controller-context.common.js", "module": "ActionContext"}, "partial.common.js": {"classlist": ["Partial.common"], "name": "partial.common.js", "module": "ActionContextAddon"}, "cookie.client.js": {"classlist": ["Cookie.client"], "name": "cookie.client.js", "module": "ActionContextAddon"}, "resource-store-adapter.common.js": {"classlist": ["Y.mojito.MojitoDispatcher"], "name": "resource-store-adapter.common.js", "module": "MojitoClient"}, "perf.client.js": {"classlist": [], "name": "perf.client.js", "module": "MojitoClient"}, "server-log.js": {"classlist": [], "name": "server-log.js", "module": "MojitoServer"}, "dali_bean.client-optional.js": {"classlist": [], "name": "dali_bean.client-optional.js", "module": "CommonLibs"}, "route-maker.common.js": {"classlist": [], "name": "route-maker.common.js", "module": "CommonLibs"}, "i13n.common.js": {"classlist": ["I13n.server"], "name": "i13n.common.js", "module": "ActionContextAddon"}, "composite.common.js": {"classlist": ["Composite.common"], "name": "composite.common.js", "module": "ActionContextAddon"}, "analytics.common.js": {"classlist": ["Analytics.common"], "name": "analytics.common.js", "module": "MojitoServer"}, "controller.common.js": {"classlist": [], "name": "controller.common.js", "module": "CommonLibs"}, "http.server.js": {"classlist": ["Http.server"], "name": "http.server.js", "module": "ActionContextAddon"}, "mu.server.js": {"classlist": ["MuAdapterServer"], "name": "mu.server.js", "module": "ActionContextAddon"}, "perf.server.js": {"classlist": [], "name": "perf.server.js", "module": "MojitoClient"}, "url.common.js": {"classlist": ["Url.common"], "name": "url.common.js", "module": "ActionContextAddon"}, "registry.client-optional.js": {"classlist": [], "name": "registry.client-optional.js", "module": "CommonLibs"}, "mojito-client.client.js": {"classlist": ["Y.mojito.Client"], "name": "mojito-client.client.js", "module": "MojitoClient"}, "store.server.js": {"classlist": ["ResourceStore.server"], "name": "store.server.js", "module": "MojitoServer"}, "index.js": {"classlist": [], "name": "index.js", "module": "CommonLibs"}}, "modules": {"MojitoServer": {"description": "The Resource Store manages information about the \"resources\" in a Mojito\napplication.  These resources are things that have representation on the\nfilesystem.\nEach resource can have many different versions.  This is not talking about\nrevisions, which is how the resource changes over time.  It is instead\ntalking about how there can be a version of the resource just for iphones,\none just for android, a fallback, etc.\nThere are various types of resources:\n<pre>\nconfig      -- a piece of configuration, sometimes for another resource\ncontroller  -- the controller for a mojit\nmodel       -- a model for a mojit\nview        -- a view for a mojit\nbinder      -- a binder for a mojit\naction      -- an action to augment the controller\nasset       -- an asset (css, js, image, etc)\naddon       -- an addon to the mojito system\nspec        -- the configuration for a mojit instance\nyui-lang    -- a YUI3 language bundle\nyui-module  -- a YUI3 module (that isn't one of the above)\n</pre>\nThe metadata kept about each resource is \"normalized\" to the follow keys:\n(not all resources will have all keys)\n(some types will have additional keys)\n(not all combinations of type:source are valid)\n<pre>\n- id\ncontext-insensitive ID of the resource\nsaid another way, all versions of a resource have the same ID\n- type\nsee above\n- source\n`fw`, `app` or `mojit`\nwhere the resource is defined\n- fsPath\nthe path on the filesystem\n- staticHandlerURL\nthe URL that will cause the asset handler to serve the resource\nfor resources that can be deployed by reference to the client\n- name\nspecific to type\n- configType\nfor type=config\nthe type of the configuration\n- viewEngine\nfor type=view\n`mu`, `dust`, etc\n- viewOutputFormat\nfor type=view\noutput format that the view will generate\n`xml`, `html`, etc\n- assetType\nfor type=asset\n`css`, `js`, `png`, `swf`, etc\n- addonType\nfor type=addon\nthe mojito subsystem to which the addon should be added\n- yuiModuleName\nfor any resource delivered as a YUI3 module\nthe YUI3 module name\n- yuiModuleVersion\nfor any resource delivered as a YUI3 module\nthe YUI3 module version\n- yuiModuleMeta\nfor any resource delivered as a YUI3 module\nthe YUI3 module metadata\n(requires, langs, etc)\n- yuiSortedPaths\nfor any resource delivered as a YUI3 module\na list of YUI modules required by the module,\nwith transitive dependencies resolved\nformat:  { yui-module-name: URL-to-load-yui-module }\n</pre>", "submodules": [], "classlist": ["MojitoServer", "OutputHandler", "ResourceStore.server"], "filelist": ["glob.js", "index.js", "output-handler.server.js", "server-log.js", "store.server.js", "analytics.common.js"], "subdata": {}, "name": "MojitoServer"}, "ActionContext": {"description": "The Action Context is a key part of the Mojito framework. The <em>ac</em>,\nfor short, gives you access to the frameworks features from within a\ncontroller function. The ac is an abstraction that allows you to execute\nmojit actions within either a server or client context.", "submodules": [], "classlist": ["ActionContext", "MojitoDispatcher"], "filelist": ["controller-context.common.js", "dispatch.common.js", "loader.common.js", "logger.common.js", "mojit-proxy.client.js"], "subdata": {}, "name": "ActionContext"}, "CommonLibs": {"description": "Common Library", "submodules": [], "classlist": ["Y.mojito.lib.REST"], "filelist": ["route-maker.common.js", "store.client.js", "tunnel.client-optional.js", "util.common.js", "view-renderer.common.js", "io_facade.client-optional.js", "request_formatter.client-optional.js", "request_handler.client-optional.js", "requestor.client-optional.js", "response_formatter.client-optional.js", "response_processor.client-optional.js", "transport.client-optional.js", "transport_utils.client-optional.js", "dali_bean.client-optional.js", "performance_monitor.client-optional.js", "registry.client-optional.js", "controller.server.js", "store-provider.server.js", "controller.server.js", "controller.common.js", "index.js"], "subdata": {}, "name": "CommonLibs"}, "ActionContextAddon": {"description": "The <strong>Action Context</strong> uses a mechanism called\n<strong><em>Addons</em></strong> to provide functionality that lives both on\nthe server and/or client. Each Addon provides additional functions through a\nnamespace that is attached directly to the ac argument available in every\ncontroller function.", "submodules": [], "classlist": ["Analytics.common", "Assets.common", "Carrier.common", "Composite.common", "Config.common", "Cookie.client", "Cookie.server", "Deploy.server", "Device.common", "Http.server", "I13n.server", "Intl.common", "Meta.common", "OutputAdapter.common", "Params.common", "Partial.common", "Url.common", "MuAdapterClient", "MuAdapterServer"], "filelist": ["assets.common.js", "carrier.server.js", "composite.common.js", "config.common.js", "cookie.client.js", "cookie.server.js", "deploy.server.js", "device.server.js", "http.server.js", "i13n.common.js", "intl.common.js", "meta.common.js", "output-adapter.common.js", "params.common.js", "partial.common.js", "url.common.js", "mu.client.js", "mu.server.js", "action-context.common.js"], "subdata": {}, "name": "ActionContextAddon"}, "MojitoClient": {"description": "The starting point for mojito to run in the browser. You can access one\ninstance of the Mojito Client running within the browser environment\nthrough window.YMojito.client.", "submodules": [], "classlist": ["MojitProxy", "Y.mojito.Client", "Y.mojito.MojitoDispatcher"], "filelist": ["mojito-client.client.js", "mojito-test.common.js", "mojito.common.js", "output-handler.client.js", "perf.client.js", "perf.server.js", "resource-store-adapter.common.js", "rest.common.js"], "subdata": {}, "name": "MojitoClient"}}, "classmap": {"Partial.common": {"name": "Partial.common", "namespace": "", "module": "ActionContextAddon", "methods": {"invoke": {"params": [{"type": "string", "name": "action", "description": " name of the action to invoke."}, {"type": "object", "name": "options", "description": " see above."}, {"type": "function", "name": "cb", "description": " callback function to be called on completion."}], "description": "This method calls the current mojit's controller with the \"action\"\ngiven and returns its output via the callback.\nThe <em>options</em> parameter is optional and may contain:\n<dl>\n<dt>params</dt><dd>&lt;object&gt; must be broken out explicitly:\n<dl>\n<dt>route</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>url</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>body</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>file</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n</dl></dd>\n</dl>", "guessedname": "invoke", "guessedtype": "function"}, "render": {"params": [{"type": "object", "name": "data", "description": " The object to be rendered."}, {"type": "string", "name": "view", "description": " The view name to be used for rendering."}, {"type": "function", "name": "cb", "description": " callback signature is function(error, result)."}], "description": "This method renders the \"data\" provided into the \"view\" specified.\nThe \"view\" must be the name of one of the files in the current\nMojits \"views\" folder. Returns via the callback.", "guessedname": "render", "guessedtype": "function"}}, "file": "partial.common.js", "shortname": "Partial.common", "description": "<strong>Access point:</strong> <em>ac.partial.*</em>\nProvides methods for working with \"actions\" and \"views\" on the current\nMojits."}, "Meta.common": {"name": "Meta.common", "namespace": "", "module": "ActionContextAddon", "methods": {"retrieve": {"params": [{"type": "function", "name": "cb", "description": " callback will be called with the stored merged\nobject."}, {"type": "object", "name": "[optional]", "description": " scope scope of the callback."}], "description": "To retrieve stashed data that has been stored by child mojits, call\nthis function and provide a function, which will be called once the\nchildren have been dispatched and all their meta data has been\nmerged.", "guessedname": "retrieve", "guessedtype": "function"}, "store": {"params": [{"type": "string", "name": "key", "description": " The key used as the index value."}, {"type": "object", "name": "val", "description": " The value to store."}], "description": "Stores a keyed value within the meta object of the current mojit\nexecution. You can call this as many times as you like, but\nif you use the same key, you'll override previous data. Call this\nwithin child mojits when you have some data you want to make\navailable for some reason to any parents up your hierarchy.", "guessedname": "store", "guessedtype": "function"}}, "file": "meta.common.js", "shortname": "Meta.common", "description": "<strong>Access point:</strong> <em>ac.meta.*</em>\nAllows the usage of the \"meta\" object as a storage device, which can pass\ndata from child mojits up towards parents."}, "OutputHandler": {"name": "OutputHandler", "constructors": [{"params": [{"type": "Object", "name": "req", "description": " The Request object."}, {"type": "Object", "name": "res", "description": " The Response object."}, {"type": "Function", "name": "next", "description": " The next function, which should be invokable."}], "description": "This is an object used as the single pathway for data to leave a mojit\naction execution. It is used as a component of the ActionContext object,\nwhich uses it to call <em>done</em> and <em>flush</em> in order to complete.\nThere are two versions of this object, one for the client, and one for the\nserver. This is the server version, which is more complex than the client\nversion."}], "namespace": "", "module": "MojitoServer", "guessedname": "OutputHandler", "file": "output-handler.server.js", "guessedtype": "function", "shortname": "OutputHandler", "properties": {"exports": {"guessedname": "exports", "guessedtype": "property"}}, "description": "This is an object used as the single pathway for data to leave a mojit\naction execution. It is used as a component of the ActionContext object,\nwhich uses it to call <em>done</em> and <em>flush</em> in order to complete.\nThere are two versions of this object, one for the client, and one for the\nserver. This is the server version, which is more complex than the client\nversion."}, "I13n.server": {"name": "I13n.server", "namespace": "", "module": "ActionContextAddon", "methods": {"trackLink": {"return": {"type": "string", "description": "url with the hash appended to it."}, "params": [{"type": "string", "name": "url", "description": " The link to be instrumented."}, {"type": "object", "name": "link_params", "description": " The link parameters."}, {"type": "object", "name": "local_groups", "description": " - Optional."}, {"type": "object", "name": "ult_args", "description": " - Optional."}], "description": "Tracks the link view and generates the URL with the hash token\nappended to it.", "guessedname": "trackLink", "guessedtype": "function"}, "trackPageParams": {"params": [{"type": "string", "name": "key", "description": " The page parameter name."}, {"type": "string", "name": "value", "description": " The page parameter value."}], "description": "Tracks a pair of page parameters as (key, value) for this request.", "guessedname": "trackPageParams", "guessedtype": "function"}, "trackForm": {"return": {"type": "string", "description": "form action url with the hash appended to it."}, "params": [{"type": "boolean", "name": "is_post_method", "description": " True, if the method is POST."}, {"type": "string", "name": "action_url", "description": " The form action link to be instrumented."}, {"type": "object", "name": "link_params", "description": " Tracking parameters."}, {"type": "object", "name": "ult_args", "description": " Optional."}], "description": ", ,  [, ult_args [, return_code]]", "guessedname": "trackForm", "guessedtype": "function"}, "make": {"params": [{"type": "string", "name": "base", "description": " Reference to a mojit defined at the root\nlevel of the Mojito application configuration."}, {"type": "string", "name": "action", "description": " The action to associate with the base."}, {"type": "object", "name": "routeParams", "description": " used to lookup the route in the routing\ntable."}, {"type": "string", "name": "verb", "description": " GET, POST, PUT, DELETE (case insensitive)."}, {"type": "object", "name": "urlParams", "description": " added to the looked up route as query\nparams."}, {"type": "object", "name": "i13nParams", "description": " parameters to be used for link tracking."}], "description": "Provides facility to create an URL to other\nmojits with a link tracking instrumentation.", "guessedname": "make", "guessedtype": "function"}, "getSpaceid": {"return": {"type": "object", "description": "the spaceid previously set through stampPageView()\nor configuration."}, "description": "Return spaceid used for this request.", "guessedname": "getSpaceid", "guessedtype": "function"}, "trackUserLink": {"return": {"type": "string", "description": "url with the hash appended to it."}, "params": [{"type": "string", "name": "url", "description": " The link to be instrumented."}, {"type": "object", "name": "link_params", "description": " The link parameters."}, {"type": "object", "name": "local_groups", "description": " Optional."}, {"type": "object", "name": "ult_args", "description": " Optional."}], "description": "Tracks the link view for the links taken from the user generated\ncontent and hence need to be signed by B-cookie to prevent the\nsecurity problems.", "guessedname": "trackUserLink", "guessedtype": "function"}, "stampPageView": {"params": [{"type": "number", "name": "spaceid", "description": " The spaceid to be used."}], "description": "Stamps the page view event.", "guessedname": "stampPageView", "guessedtype": "function"}, "trackClickOnly": {"return": {"type": "string", "description": "url with the hash appended to it."}, "params": [{"type": "string", "name": "url", "description": " The link to be instrumented."}, {"type": "object", "name": "link_params", "description": " The link parameters."}, {"type": "object", "name": "ult_args", "description": " Optional."}], "description": "Instrument links for tracking of the link clicks by gemerating the\nURL with the hash token appended to it.", "guessedname": "trackClickOnly", "guessedtype": "function"}}, "file": "i13n.common.js", "shortname": "I13n.server", "description": "<strong>Access point:</strong> <em>ac.i13n.*</em>\nInstrumentation addon for link tracking and page views."}, "MojitoServer": {"name": "MojitoServer", "constructors": [{"description": "The Mojito Server bootstrap"}], "namespace": "", "module": "MojitoServer", "guessedname": "MOJITO_MIDDLEWARE", "methods": {"createServer": {"return": {"type": "Object", "description": "Express application."}, "params": [{"type": "Object", "name": "options", "description": " Options for starting the app."}], "description": "Creates an Express application with the Mojito framework already added.", "guessedname": "createServer", "guessedtype": "function"}, "addMojitoToExpressApp": {"params": [{"type": "Object", "name": "app", "description": " Express application."}, {"type": "Object", "name": "options", "description": " The directory to start the application in."}], "description": "Adds the Mojito framework to the Express application.\nYou only need to call one of addMojitoToExpressApp() or createServer().\nIf you want to create your own Express app do that then use\naddMojitoToExpressApp().  Otherwise Mojito can create an app for you\nif you use createServer().", "guessedname": "addMojitoToExpressApp", "guessedtype": "function"}, "include": {"params": [{"type": "string", "name": "path", "description": " The path used to locate resources."}], "description": "Surfaces the CLI.", "guessedname": "include", "guessedtype": "function"}}, "file": "index.js", "guessedtype": "property", "shortname": "MojitoServer", "properties": {"_mojito": {"guessedname": "_mojito", "guessedtype": "property"}, "exports": {"guessedname": "exports", "guessedtype": "property"}, "constructor": {"guessedname": "constructor", "guessedtype": "property"}}, "description": "The Mojito Server bootstrap"}, "Url.common": {"name": "Url.common", "namespace": "", "module": "ActionContextAddon", "methods": {"make": {"params": [{"type": "string", "name": "base", "description": " Base mojit defined at the root level of the\nMojito application configuration."}, {"type": "string", "name": "action", "description": " Action reference, concatenated to the base\nusing a period (.) separator."}, {"type": "object", "name": "routeParams", "description": " used to lookup the route in the routing\ntable."}, {"type": "string", "name": "varb", "description": " GET, POST, PUT, DELETE (case insensitive)."}, {"type": "object", "name": "urlParams", "description": " added to the looked up route as query\nparams."}], "description": "Generates a URL from the given parameters", "guessedname": "make", "guessedtype": "function"}, "find": {"params": [{"type": "string", "name": "url", "description": " the URL to find a route for."}, {"type": "string", "name": "verb", "description": " the HTTP method."}], "description": "Finds the first matching route from the given URL", "guessedname": "find", "guessedtype": "function"}}, "file": "url.common.js", "shortname": "Url.common", "description": "<strong>Access point:</strong> <em>ac.url.*</em>\nGenerates URL's based on the applictions routing configuration"}, "Y.mojito.MojitoDispatcher": {"name": "Y.mojito.MojitoDispatcher", "constructors": [{"params": [{"type": "ServerStore", "name": "resourceStore", "description": " the store to use."}], "description": "This object is responsible for running mojits."}], "namespace": "Y.mojito", "module": "MojitoClient", "private": "", "file": "resource-store-adapter.common.js", "shortname": "MojitoDispatcher", "description": "This object is responsible for running mojits."}, "ActionContext": {"name": "ActionContext", "namespace": "", "module": "ActionContext", "file": "action-context.common.js", "shortname": "ActionContext", "description": "The main point of entry for all mojits into Mojito. The Action Context is\npassed to every mojit action during execution, either on the client or\nserver. This object is the API into Mojito, can can have many plugins\nattached the provide extra functionality."}, "Intl.common": {"name": "Intl.common", "namespace": "", "module": "ActionContextAddon", "methods": {"lang": {"return": {"type": "string", "description": "translated string for label."}, "params": [{"type": "string", "name": "label", "description": "  The initial label to be translated."}, {"type": "string|Array|Object", "name": "args", "description": "  optional parameters for the string"}], "description": "Returns translated string.", "guessedname": "lang", "guessedtype": "function"}, "formatDate": {"return": {"type": "string", "description": "formatted data for language."}, "params": [{"type": "Date", "name": "date", "description": " The initial date to be formatted."}], "description": "Returns local-specified date.", "guessedname": "formatDate", "guessedtype": "function"}}, "file": "intl.common.js", "shortname": "Intl.common", "description": "<strong>Access point:</strong> <em>ac.intl.*</em>\nInternationalization addon"}, "ResourceStore.server": {"name": "ResourceStore.server", "constructors": [{"params": [{"type": "string", "name": "root", "description": "  directory where application is found"}, {"type": "object", "name": "libs", "description": "  dependent libraries -- this param is mainly used\nduring unit testing"}], "description": "The Resource Store manages information about the \"resources\" in a Mojito\napplication.  These resources are things that have representation on the\nfilesystem.\nEach resource can have many different versions.  This is not talking about\nrevisions, which is how the resource changes over time.  It is instead\ntalking about how there can be a version of the resource just for iphones,\none just for android, a fallback, etc.\nThere are various types of resources:\n<pre>\nconfig      -- a piece of configuration, sometimes for another resource\ncontroller  -- the controller for a mojit\nmodel       -- a model for a mojit\nview        -- a view for a mojit\nbinder      -- a binder for a mojit\naction      -- an action to augment the controller\nasset       -- an asset (css, js, image, etc)\naddon       -- an addon to the mojito system\nspec        -- the configuration for a mojit instance\nyui-lang    -- a YUI3 language bundle\nyui-module  -- a YUI3 module (that isn't one of the above)\n</pre>\nThe metadata kept about each resource is \"normalized\" to the follow keys:\n(not all resources will have all keys)\n(some types will have additional keys)\n(not all combinations of type:source are valid)\n<pre>\n- id\ncontext-insensitive ID of the resource\nsaid another way, all versions of a resource have the same ID\n- type\nsee above\n- source\n`fw`, `app` or `mojit`\nwhere the resource is defined\n- fsPath\nthe path on the filesystem\n- staticHandlerURL\nthe URL that will cause the asset handler to serve the resource\nfor resources that can be deployed by reference to the client\n- name\nspecific to type\n- configType\nfor type=config\nthe type of the configuration\n- viewEngine\nfor type=view\n`mu`, `dust`, etc\n- viewOutputFormat\nfor type=view\noutput format that the view will generate\n`xml`, `html`, etc\n- assetType\nfor type=asset\n`css`, `js`, `png`, `swf`, etc\n- addonType\nfor type=addon\nthe mojito subsystem to which the addon should be added\n- yuiModuleName\nfor any resource delivered as a YUI3 module\nthe YUI3 module name\n- yuiModuleVersion\nfor any resource delivered as a YUI3 module\nthe YUI3 module version\n- yuiModuleMeta\nfor any resource delivered as a YUI3 module\nthe YUI3 module metadata\n(requires, langs, etc)\n- yuiSortedPaths\nfor any resource delivered as a YUI3 module\na list of YUI modules required by the module,\nwith transitive dependencies resolved\nformat:  { yui-module-name: URL-to-load-yui-module }\n</pre>"}], "namespace": "", "module": "MojitoServer", "methods": {"preload": {"return": {"type": "nothing", "description": ""}, "params": [{"type": "object", "name": "appContext", "description": " the base context for reading configuration."}, {"type": "object", "name": "appConfig", "description": " overrides for the app config."}], "description": "Preloads everything in the app, and as well pertinent parts of\nthe framework.", "guessedname": "preload", "guessedtype": "function"}, "getSpec": {"return": {"type": "nothing", "description": "results returned via the callback parameter"}, "params": [{"type": "string", "name": "env", "description": "  either \"client\" or \"server\""}, {"type": "string", "name": "id", "description": "  the ID of the spec to return"}, {"type": "object", "name": "context", "description": "  the runtime context for the spec"}, {"type": "function(err,spec)", "name": "callback", "description": "  callback used to return the results (or error)"}], "description": "Returns, via callback, the fully expanded mojit instance specification.", "guessedname": "getSpec", "guessedtype": "function"}, "getAppConfig": {"return": {"type": "object", "description": "config object"}, "params": [{"type": "object", "name": "ctx", "description": "  the runtime context under which to load the config"}, {"type": "string", "name": "name", "description": "  type of config to read:\n- definition:  reads ./application.json\n- package:  reads ./package.json\n- routes:  reads ./routes.json (or whatever was configured in\nappConfig('definition').routesFiles)"}], "description": "gets application configuration", "guessedname": "getAppConfig", "guessedtype": "function"}, "getInlineCssMojits": {"return": {"type": "array", "description": "object describing where to put the inline CSS file and what it should contain"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctxFilter", "description": "  (optional) runtime context to restrict results to"}], "description": "Returns details on how to make inline CSS for mojits.\nThis example comes from (a modified) GSG5.\n[ {\ncontext: { device: 'iphone' },\nmojitName: 'FlickrDetail',\nyuiModuleName: 'inlinecss/FlickrDetail',\ndest: '/blah/mojits/FlickrDetail/autoload/compiled' +\n'/css.iphone.client.js',\nsrcs: {\n'/static/FlickrDetail/assets/index.css':\n'    /blah/mojits/FlickrDetail/assets/index.iphone.css',\n'/static/FlickrDetail/assets/message.css':\n'    /blah/mojits/FlickrDetail/assets/message.css'\n}\n]", "guessedname": "getInlineCssMojits", "guessedtype": "function"}, "getRoutes": {"return": {"type": "object", "description": "routes"}, "params": [{"type": "object", "name": "ctx", "description": "  runtime context under which to load the routes"}], "description": "Returns the routes configured in the application.", "guessedname": "getRoutes", "guessedtype": "function"}, "expandInstanceForEnv": {"return": {"type": "nothing", "description": "results returned via the callback parameter"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "instance", "description": "  partial instance to expand"}, {"type": "object", "name": "ctx", "description": "  the runtime context for the instance"}, {"type": "function(err,instance)", "name": "cb", "description": "  callback used to return the results (or error)"}], "description": "This method takes a partial instance and expands it to all details needed\nto run the mojit.\nOnly `base` or `type` fields are required. You should only specify one.\n<pre>\ninstance: {\nbase: string\n// specifies a \"base\" instance which this instance will extend\n// the value refers to a key of `specs` in `application.json`\ntype: string\n// specifies the mojit type\naction: \"\",\n// specifies a default action if the instance isn't dispatched\n// with a specific one.\nconfig: object\n// the config for the mojit\n// this will be augmented (appropriately) with the mojit type\n// defaults found in the type's `defaults.json`\nappConfig: object\n// the application config (appropriate for the context)\nassetRoot: \"\",\n// path to directory containing assets\n// the path will be a URL if `env` is `client` otherwise it's a\n// filesystem path\ndefinition: object\n// the body of the `defintion.json` for the mojit type\ndefaults: object\n// the body of the `defaults.json` for the mojit type\nyui: {\n// details for generating a YUI sandbox for this instance\nconfig: {\n// configuration details for the YUI.GlobalConfig.groups (or\n// an equivalent).\n// The module paths are given as `fullpath` and contain\n// either a URL if `env' is `client` or a filesystem path if\n// `env` is `server`\n},\nrequires: []\n// list of YUI modules that this instance requires\n}\nactions: array\n// list of paths to the YUI modules containing actions\ncontroller: string\n// path to controller\n// the path will be a URL if `env` is `client` otherwise it's a\n// filesystem path\nlang:\n// path to YUI module of the language bundle\n// the path will be a URL if `env` is `client` otherwise it's a\n// filesystem path\nmodels: object\n// list of models used by the mojit type\n// the key is the model name, and the value is the path to the\n// model file\n// the path will be a URL if `env` is `client` otherwise it's a\n// filesystem path\nviews: {\n// list of views in the mojit type\n// the key is the view name, and the value is details about the\n// view\nview-name: {\n\"content-path\": \"\",\n// the path to use to load the body of the view\n// the path will be a URL if `env` is `client` otherwise\n// it's a filesystem path\n\"engine\": \"\",\n// which engine is used to render the view\n\"binder-path\": \"\",\n// the path to the binder\n// the path will be a URL if `env` is `client` otherwise\n// it's a filesystem path\n\"binder-module\": \"\"\n// the YUI module name of the binder\n}\n}\n}\n</pre>", "guessedname": "expandInstanceForEnv", "guessedtype": "function"}, "getAllMojits": {"return": {"type": "object", "description": "keys are mojit type names, values are details about each mojit"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context"}], "description": "Returns details about all mojits in the application.", "guessedname": "getAllMojits", "guessedtype": "function"}, "getType": {"return": {"type": "nothing", "description": "results returned via the callback parameter"}, "params": [{"type": "string", "name": "env", "description": "  either \"client\" or \"server\""}, {"type": "string", "name": "type", "description": "  the mojit type"}, {"type": "object", "name": "context", "description": "  the runtime context for the spec"}, {"type": "function(err,spec)", "name": "callback", "description": "  callback used to return the results (or error)"}], "description": "Returns, via callback, the details of the mojit type.", "guessedname": "getType", "guessedtype": "function"}, "getMojitTypeDetails": {"return": {"type": "object", "description": "returns the \"dest\" parameter, which has had details added to it"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context"}, {"type": "string", "name": "mojitType", "description": "  mojit type"}, {"type": "object", "name": "dest", "description": "  object in which to place the results"}], "description": "Returns details about a mojit type.", "guessedname": "getMojitTypeDetails", "guessedtype": "function"}, "expandInstance": {"return": {"type": "nothing", "description": "results returned via the callback parameter"}, "params": [{"type": "map", "name": "instance", "description": "  Partial instance to expand."}, {"type": "object", "name": "ctx", "description": "  The request context."}, {"type": "function(err,instance)", "name": "cb", "description": "  callback used to return the results (or error)"}], "description": "This just calls expandInstanceForEnv() with `env` set to `server`.", "guessedname": "expandInstance", "guessedtype": "function"}, "listAllMojits": {"return": {"type": "array", "description": "list of mojit types"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}], "description": "Returns a list of all mojit types in the application.", "guessedname": "listAllMojits", "guessedtype": "function"}, "setLogger": {"return": {"type": "nothing", "description": ""}, "params": [{"type": "object", "name": "l", "description": "  object containing a log(message,level,source) function"}], "description": "Sets the logger object.", "guessedname": "setLogger", "guessedtype": "function"}, "getRollupsApp": {"return": {"type": "object", "description": "object describing where to put the rollup and what it should contain"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context"}], "description": "Returns details on how to make rollups for app-level resources.", "guessedname": "getRollupsApp", "guessedtype": "function"}, "getYuiConfigApp": {"return": {"type": "object", "description": "YUI configuration for the app-level modules"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context for YUI configuration"}], "description": "Returns the YUI configuration object which tells YUI about the\nYUI modules in the application (which aren't part of a mojit).", "guessedname": "getYuiConfigApp", "guessedtype": "function"}, "getYuiConfigFw": {"return": {"type": "object", "description": "YUI configuration for Mojito framework"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context for YUI configuration"}], "description": "Returns the YUI configuration object which tells YUI about the\nYUI modules in the Mojito framework.", "guessedname": "getYuiConfigFw", "guessedtype": "function"}, "getYuiConfigAllMojits": {"return": {"type": "object", "description": "YUI configuration for all mojits"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context for YUI configuration"}], "description": "Returns the YUI configuration object which tells YUI about the\nYUI modules in all the mojits.", "guessedname": "getYuiConfigAllMojits", "guessedtype": "function"}, "getRollupsMojits": {"return": {"type": "object", "description": "object describing where to put the rollup and what it should contain"}, "params": [{"type": "string", "name": "env", "description": "  \"client\" or \"server\""}, {"type": "object", "name": "ctx", "description": "  runtime context"}], "description": "Returns details on how to make rollups for mojit-level resources.\nThis example comes from GSG5.\n{ FlickrDetail:\ndest: '/blah/blah/mojits/FlickrDetail/rollup.client.js'\nsrcs: [\n'/blah/blah/mojits/FlickrDetail/controller.common.js',\n'/blah/blah/mojits/FlickrDetail/binders/index.js',\n'/blah/blah/mojits/FlickrDetail/lang/FlickrDetail_de.js',\n'/blah/blah/mojits/FlickrDetail/lang/FlickrDetail_en-US.js'\n]\n}", "guessedname": "getRollupsMojits", "guessedtype": "function"}, "fileFromStaticHandlerURL": {"return": {"type": "string", "description": "path on filesystem of specified URL, or undefined"}, "params": [{"type": "string", "name": "url", "description": "  static URL"}], "description": "Returns the filesystem location of the static URL.\nReturns undefined if given URL isn't part of the app.", "guessedname": "fileFromStaticHandlerURL", "guessedtype": "function"}}, "file": "store.server.js", "shortname": "ResourceStore.server", "description": "The Resource Store manages information about the \"resources\" in a Mojito\napplication.  These resources are things that have representation on the\nfilesystem.\nEach resource can have many different versions.  This is not talking about\nrevisions, which is how the resource changes over time.  It is instead\ntalking about how there can be a version of the resource just for iphones,\none just for android, a fallback, etc.\nThere are various types of resources:\n<pre>\nconfig      -- a piece of configuration, sometimes for another resource\ncontroller  -- the controller for a mojit\nmodel       -- a model for a mojit\nview        -- a view for a mojit\nbinder      -- a binder for a mojit\naction      -- an action to augment the controller\nasset       -- an asset (css, js, image, etc)\naddon       -- an addon to the mojito system\nspec        -- the configuration for a mojit instance\nyui-lang    -- a YUI3 language bundle\nyui-module  -- a YUI3 module (that isn't one of the above)\n</pre>\nThe metadata kept about each resource is \"normalized\" to the follow keys:\n(not all resources will have all keys)\n(some types will have additional keys)\n(not all combinations of type:source are valid)\n<pre>\n- id\ncontext-insensitive ID of the resource\nsaid another way, all versions of a resource have the same ID\n- type\nsee above\n- source\n`fw`, `app` or `mojit`\nwhere the resource is defined\n- fsPath\nthe path on the filesystem\n- staticHandlerURL\nthe URL that will cause the asset handler to serve the resource\nfor resources that can be deployed by reference to the client\n- name\nspecific to type\n- configType\nfor type=config\nthe type of the configuration\n- viewEngine\nfor type=view\n`mu`, `dust`, etc\n- viewOutputFormat\nfor type=view\noutput format that the view will generate\n`xml`, `html`, etc\n- assetType\nfor type=asset\n`css`, `js`, `png`, `swf`, etc\n- addonType\nfor type=addon\nthe mojito subsystem to which the addon should be added\n- yuiModuleName\nfor any resource delivered as a YUI3 module\nthe YUI3 module name\n- yuiModuleVersion\nfor any resource delivered as a YUI3 module\nthe YUI3 module version\n- yuiModuleMeta\nfor any resource delivered as a YUI3 module\nthe YUI3 module metadata\n(requires, langs, etc)\n- yuiSortedPaths\nfor any resource delivered as a YUI3 module\na list of YUI modules required by the module,\nwith transitive dependencies resolved\nformat:  { yui-module-name: URL-to-load-yui-module }\n</pre>"}, "Deploy.server": {"name": "Deploy.server", "namespace": "", "module": "ActionContextAddon", "methods": {"setStore": {"guessedname": "setStore", "params": [{"type": "ResourceStore", "name": "rs", "description": " The resource store instance."}], "description": "Declaration of store requirement.", "private": "", "guessedtype": "function"}, "getScripts": {"return": {"type": "object", "description": "An object containing script descriptors."}, "description": "TODO: [Issue 66] This can be made faster with a single for\nloop and caching.\nNote: A single SCRIPT tag containing all the JS on the pages is\nslower than many SCRIPT tags (checked on iPad only).", "private": "", "params": [{"type": "bool", "name": "embed", "description": " Should returned scripts be embedded in script\ntags."}], "guessedname": "getScripts", "guessedtype": "function"}, "constructMojitoClientRuntime": {"params": [{"type": "AssetHandler", "name": "assetHandler", "description": " asset handler used to add scripts\nto the DOM under construction."}, {"type": "object", "name": "binderMap", "description": " information about the binders that will be\ndeployed to the client."}], "description": "Builds up the browser Mojito runtime.", "guessedname": "constructMojitoClientRuntime", "guessedtype": "function"}}, "file": "deploy.server.js", "shortname": "Deploy.server", "description": "<strong>Access point:</strong> <em>ac.deploy.*</em>\nProvides ability to create client runtime deployment HTML"}, "MojitProxy": {"name": "MojitProxy", "namespace": "", "module": "MojitoClient", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": " The data to render."}, {"type": "string", "name": "view", "description": " The view name to use for rendering."}, {"type": "function(err,str)", "name": "cb", "description": " The callback function."}], "description": "This method renders the \"data\" provided into the \"View\" specified.\nThe \"view\" must be the name of one of the files in the current\nMojits \"views\" folder. Returns via the callback.", "guessedname": "render", "guessedtype": "function"}, "invoke": {"params": [{"type": "string", "name": "action", "description": " name of the action to invoke."}, {"type": "Object", "name": "options", "description": " see above."}, {"type": "function", "name": "cb", "description": " function to be called on completion."}], "description": "Used by the mojit binders to invoke actions on themselves within\nMojito.\nThe <em>options</em> parameter is optional and may contain:\n<dl>\n<dt>params</dt><dd>&lt;object&gt; must be broken out explicitly:\n<dl>\n<dt>route</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>url</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>body</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>file</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n</dl></dd>\n<dt>rpc</dt><dd>&lt;boolean&gt; Means that we are immediately\nsending the request to the server to answer the invocation.</dd>\n</dl>", "guessedname": "invoke", "guessedtype": "function"}, "destroyChild": {"params": [{"type": "string", "name": "id", "description": " Either the slot key of the child, or the DOM\nview id of the child."}, {"type": "boolean", "name": "retainNode", "description": " if true, the binder's node will remain in\nthe dom."}], "description": "Clears out a child's view, calling the appropriate life cycle\nfunctions, then destroy's its binder and dereferences it. Will also\ndereference the child from this mojit's children.", "guessedname": "destroyChild", "guessedtype": "function"}, "unlisten": {"params": [{"type": "String", "name": "[optional]", "description": " name event name."}], "description": "The opposite of the \"listen\" function. Deletes all callback functions\nfrom the listener queue associated with this binder and event type.\nIf event name is not specified, all callbacks associated with this\nbinder are deleted.", "guessedname": "unlisten", "guessedtype": "function"}, "destroySelf": {"params": [{"type": "boolean", "name": "retainNode", "description": " if true, the binder's node will remain in\nthe dom."}], "description": "Allows a binder to destroy itself and be removed from Mojito client\nruntime entirely.", "guessedname": "destroySelf", "guessedtype": "function"}, "broadcast": {"params": [{"type": "String", "name": "name", "description": " event name."}, {"type": "Object", "name": "payload", "description": " the payload for the event."}, {"type": "object} options currently only used to specify target for\nbroadcast. For example, to target only one child mojit for\nbroadcast, use:\n{target: {slot: 'slot name', viewId: 'DOM view id'}", "name": ".", "description": ""}], "description": "Used by mojit binders to broadcast a message between mojits.", "guessedname": "broadcast", "guessedtype": "function"}, "refreshView": {"params": [{"type": "object", "name": "opts", "description": " same as the options for invoke()."}, {"type": "function", "name": "cb", "description": " Called after replacement and onRefreshView have\nbeen called, sends data/meta."}], "description": "Refreshes the current DOM view for this binder without recreating the\nbinder instance. Will call the binder's onRefreshView() function when\ncomplete with the new Y.Node and HTMLElement objects.", "guessedname": "refreshView", "guessedtype": "function"}, "getChildren": {"return": {"type": "object", "description": "slot<string>-->child information.<object>"}, "description": "Helper function to gather up details about a mojit's children from\nthe Mojito Client.", "guessedname": "getChildren", "guessedtype": "function"}, "destroyChildren": {"params": [{"type": "boolean", "name": "retainNode", "description": " if true, the binder's node will remain in\nthe dom."}], "description": "Destroys all children. (Calls destroyChild() for each child.)", "guessedname": "destroyChildren", "guessedtype": "function"}, "getFromUrl": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Gets URL parameters", "guessedname": "getFromUrl", "guessedtype": "function"}, "listen": {"params": [{"type": "String", "name": "name", "description": " event name."}, {"type": "Function", "name": "callback", "description": " called when an event is broadcast with\nthe event data."}], "description": "Allows mojit binders to register to listen to other mojit events", "guessedname": "listen", "guessedtype": "function"}}, "file": "mojit-proxy.client.js", "shortname": "MojitProxy", "properties": {"_mojito": {"type": "{Object}", "description": "The top-level Mojito namespace.", "guessedname": "_mojito", "guessedtype": "property"}, "config": {"type": "{object}", "description": "The mojit configuration for this binder", "guessedname": "config", "guessedtype": "property"}, "type": {"type": "{string}", "description": "The mojit type", "guessedname": "type", "guessedtype": "property"}, "context": {"type": "{object}", "description": "The context used to generate this page", "guessedname": "context", "guessedtype": "property"}}, "description": "The object that is given to each mojit binder to be used to interact with\nother mojits and the mojito framework."}, "Cookie.client": {"name": "Cookie.client", "namespace": "", "module": "ActionContextAddon", "file": "cookie.client.js", "shortname": "Cookie.client", "description": "<strong>Access point:</strong> <em>ac.cookie.*</em>\nThis client-side cookie add-on allows you to easily use cookies. This API\nmatches the YUI Cookie API exactly.\nhttp://developer.yahoo.com/yui/3/api/Cookie.html"}, "OutputAdapter.common": {"name": "OutputAdapter.common", "namespace": "", "module": "ActionContextAddon", "private": "", "file": "output-adapter.common.js", "shortname": "OutputAdapter.common", "description": "<strong>Access point:</strong> <em>ac.*</em>\nThe main API point for developers in a Controller. This addon provides\nthe core functions\nof the ActionContext: <em>flush</em>, <em>done</em>, and <em>error</em>."}, "Y.mojito.lib.REST": {"name": "Y.mojito.lib.REST", "namespace": "Y.mojito.lib", "module": "CommonLibs", "guessedname": "REST", "methods": {"getComputedRoutes": {"return": {"type": "object", "description": "computed routes."}, "description": "For optimization. Call this to get the computed routes that can be\npassed to the constructor to avoid recomputing the routes.", "guessedname": "getComputedRoutes", "guessedtype": "function"}, "registerBean": {"params": [{"type": "string", "name": "name", "description": " Required identifier of this bean."}, {"type": "Object", "name": "bean", "description": " Either a constructor Function or an instance\nobject of a bean."}], "description": "Called to register a bean or bean constructor with the bean registry.\nIf this method is called twice with the same bean, the last bean\nwins. Only one type of bean can be in the system at a time.", "guessedname": "registerBean", "guessedtype": "function"}, "mergeRecursive": {"params": [{"type": "object", "name": "dest", "description": " The destination object."}, {"type": "object", "name": "src", "description": " The source object."}, {"type": "boolean", "name": "typeMatch", "description": " Only replace if src and dest types are\nthe same type if true."}], "description": "Recursively merge properties of two objects", "guessedname": "mergeRecursive", "guessedtype": "function"}, "_wsRequestFormatter": {"guessedname": "_wsRequestFormatter", "return": {"type": "Object", "description": "the formatted request."}, "description": "Format web service requests using var foo = function() format\nso that reset is easier.", "private": "", "guessedtype": "function"}, "getBean": {"return": {"type": "Object", "description": "the bean instance, or undefined if it is not\nregistered."}, "description": "If the bean system has not been instatiated yet, this will\ninstantiate all beans! Then one bean instance is returned by name.", "guessedname": "getBean", "guessedtype": "function"}, "setStore": {"guessedname": "setStore", "params": [{"type": "ResourceStore", "name": "rs", "description": " The resource store."}], "description": "Declaration of store requirement.", "private": "", "guessedtype": "function"}, "metaMerge": {"guessedname": "metaMerge", "params": [{"type": "object", "name": "to", "description": " The target object."}, {"type": "object", "name": "from", "description": " The source object."}, {"type": "boolean", "name": "clobber", "description": " True to overwrite existing properties."}], "description": "Used to merge meta objects into each other. Special consideration for\ncertain headers values like 'content-type'.", "private": "", "guessedtype": "function"}, "_matchToInternal": {"guessedname": "_matchToInternal", "params": [{"type": "string", "name": "uri", "description": " The uri to find a route for."}, {"type": "string", "name": "verb.", "description": " The HTTP verb for the route."}], "description": "Returns a matching route for the given URI", "private": "", "guessedtype": "function"}, "find": {"params": [{"type": "string", "name": "url", "description": " the URL to find a route for."}, {"type": "string", "name": "verb", "description": " the HTTP method."}], "description": "Finds a route for a given method+URL", "guessedname": "find", "guessedtype": "function"}, "GET": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit."}, {"type": "Object", "name": "params", "description": " parameters to add to the request."}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values."}, {"type": "Function", "name": "callback", "description": " called with response or error."}], "description": "Makes a RESTful GET request to specified URL", "guessedname": "GET", "guessedtype": "function"}, "getName": {"return": {"type": "String", "description": "name of the registered bean, or undefined if it is\nnot a registered bean."}, "description": "Given an instance of a bean, returns the String name", "guessedname": "getName", "guessedtype": "function"}, "_doRequest": {"private": "", "guessedname": "_doRequest", "guessedtype": "function"}, "setRequestFormatter": {"params": [{"type": "String", "name": "requestType", "description": " The type of request that the\nformatter should handle."}, {"type": "Function", "name": "formatter", "description": " The function to call to format the\nrequest."}], "description": "Sets the request formatter function for a given request type.", "guessedname": "setRequestFormatter", "guessedtype": "function"}, "destroy": {"description": "Called by the bean registry whenever this bean is reinitialized", "guessedname": "destroy", "guessedtype": "function"}, "HEAD": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit."}, {"type": "Object", "name": "params", "description": " parameters to add to the request."}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values."}, {"type": "Function", "name": "callback", "description": " called with response or error."}], "description": "Makes a RESTful HEAD request to specified URL", "guessedname": "HEAD", "guessedtype": "function"}, "enable": {"description": "Enables sending of requests.", "guessedname": "enable", "guessedtype": "function"}, "disable": {"params": [{"type": "Boolean", "name": "queue", "description": " (Optional) When set to true, queues all\nrequests while disabled."}], "description": "Disables all Ajax requests for the application.", "guessedname": "disable", "guessedtype": "function"}, "POST": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit."}, {"type": "Object", "name": "params", "description": " parameters to add to the request."}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values."}, {"type": "Function", "name": "callback", "description": " called with response or error."}], "description": "Makes a RESTful POST request to specified URL", "guessedname": "POST", "guessedtype": "function"}, "execute": {"guessedname": "execute", "params": [{"type": "String", "name": "url", "description": " Url to access."}, {"type": "Object", "name": "data", "description": " The data to send."}, {"type": "String", "name": "method", "description": " GET or POST."}], "description": "Executes an io request.", "private": "", "guessedtype": "function"}, "getBeans": {"return": {"type": "Object", "description": "contains all beans, each bean is accessible by bean\nname."}, "description": "If the bean system has not been instatiated yet, this will\ninstantiate all beans!", "guessedname": "getBeans", "guessedtype": "function"}, "setResponseFormatter": {"params": [{"type": "Function", "name": "formatter", "description": " The function to call to format the\nresponse object."}], "description": "Sets the response formatter function for all responses.", "guessedname": "setResponseFormatter", "guessedtype": "function"}, "PUT": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit."}, {"type": "Object", "name": "params", "description": " parameters to add to the request."}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values."}, {"type": "Function", "name": "callback", "description": " called with response or error."}], "description": "Makes a RESTful PUT request to specified URL", "guessedname": "PUT", "guessedtype": "function"}, "_simulateResponse": {"guessedname": "_simulateResponse", "params": [{"type": "Number", "name": "id", "description": " the id of the transaction."}, {"type": "Object", "name": "details", "description": " the details of the response."}, {"type": "Boolean", "name": "badcookie", "description": " Optional. If true simulate cookies\nturned off."}], "description": "Simulate a server response", "private": "", "guessedtype": "function"}, "DELETE": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit."}, {"type": "Object", "name": "params", "description": " parameters to add to the request."}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values."}, {"type": "Function", "name": "callback", "description": " called with response or error."}], "description": "Makes a RESTful DELETE request to specified URL", "guessedname": "DELETE", "guessedtype": "function"}}, "file": "rest.common.js", "guessedtype": "property", "shortname": "REST", "description": "The Rest module for Mojito provides an easy way to make RESTful calls to\nURLs without messing about with Y.io."}, "Http.server": {"name": "Http.server", "namespace": "", "module": "ActionContextAddon", "methods": {"redirect": {"params": [{"type": "string", "name": "uri", "description": " the URI to redirect to."}, {"type": "Number", "name": "code", "description": " [optional] if not specifed, 301."}], "description": "This redirect is an external redirect. It causes an HTTP\nstatus code 301 by default.", "guessedname": "redirect", "guessedtype": "function"}, "getHeader": {"return": {"type": "object", "description": "header value."}, "params": [{"type": "string", "name": "name", "description": " header name."}], "description": "Returns one request header value", "guessedname": "getHeader", "guessedtype": "function"}, "addHeaders": {"params": [{"type": "object", "name": "hdrs", "description": " header values to add."}], "description": "Adds a object of headers all at once, adding to previous values", "guessedname": "addHeaders", "guessedtype": "function"}, "getRequest": {"return": {"type": "ServerRequest", "description": "The node.js http.ServerRequest instance."}, "description": "Returns the HTTP request.", "guessedname": "getRequest", "guessedtype": "function"}, "addHeader": {"params": [{"type": "String", "name": "key", "description": " header name."}, {"type": "String", "name": "val", "description": " header value."}], "description": "Adds a header to the response without overriding previous values", "guessedname": "addHeader", "guessedtype": "function"}, "getHeaders": {"return": {"type": "object", "description": "all headers."}, "description": "Returns all request headers", "guessedname": "getHeaders", "guessedtype": "function"}, "getResponse": {"return": {"type": "ServerResponse", "description": "The node.js http.ServerResponse instance."}, "description": "Returns the HTTP response object from the request.", "guessedname": "getResponse", "guessedtype": "function"}, "isXhr": {"return": {"type": "boolean", "description": "True if the receiver is associated with an XHR\nrequest."}, "description": "Helper to tell you if this is an XHR request. Checks specifically\nfor the 'x-requested-with' header.", "guessedname": "isXhr", "guessedtype": "function"}, "setHeaders": {"params": [{"type": "object", "name": "hdrs", "description": " header values to set."}], "description": "Sets a object full of headers all at once, overriding previous values", "guessedname": "setHeaders", "guessedtype": "function"}, "setHeader": {"params": [{"type": "string", "name": "key", "description": " header name."}, {"type": "string", "name": "val", "description": " header value."}], "description": "Sets a header by key, overriding previous values", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "http.server.js", "shortname": "Http.server", "description": "<strong>Access point:</strong> <em>ac.http.*</em>\nThis is a server-only utility plugin that makes many server side\nresources available for mojit code that will never run on the client."}, "MuAdapterClient": {"name": "MuAdapterClient", "namespace": "", "module": "ActionContextAddon", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": " The data to render."}, {"type": "string", "name": "mojitType", "description": " The name of the mojit type."}, {"type": "string", "name": "tmpl", "description": " The name of the template to render."}, {"type": "object", "name": "adapter", "description": " The output adapter to use."}, {"type": "object", "name": "meta", "description": " Optional metadata."}, {"type": "boolean", "name": "more", "description": " Whether there will be more content later."}], "description": "Renders the mustache template using the data provided.", "guessedname": "render", "guessedtype": "function"}}, "private": "", "file": "mu.client.js", "shortname": "MuAdapterClient", "description": "Class text."}, "Y.mojito.Client": {"name": "Y.mojito.Client", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " The entire configuration object written by the\nserver to start up mojito."}], "description": "The starting point for mojito to run in the browser. You can access one\ninstance of the Mojito Client running within the browser environment\nthrough window.YMojito.client."}], "namespace": "Y.mojito", "module": "MojitoClient", "methods": {"subscribe": {"params": [{"type": "string", "name": "evt", "description": " name of event to subscribe to."}, {"type": "function(data)", "name": "cb", "description": " callback called when the event fires."}], "description": "Subscribe to a MojitoClient lifecycle event.", "guessedname": "subscribe", "guessedtype": "function"}, "executeAction": {"guessedname": "executeAction", "params": [{"type": "Object", "name": "command", "description": " must contain mojit id and action to execute."}, {"type": "String", "name": "viewId", "description": " the view id of the current mojit, which is\nexecuting the action."}, {"type": "Function", "name": "cb", "description": " callback to run when complete."}], "description": "Used for binders to execute their actions through the Mojito\nframework through their proxies.", "private": "", "guessedtype": "function"}, "pause": {"description": "Pause the Mojito Client and all mojits that are running. This will\nnotify all binders that they have been paused by calling their\nonPause() functions. It will prevent the immediate execution of\nseveral mojit proxy operations that might cause a long process to\nbegin (especially things that might go to the server).\nTo resume, simply call .resume(). This will immediately execute all\nactions that occurred while Mojito was paused.", "guessedname": "pause", "guessedtype": "function"}, "resume": {"description": "Resumes the Mojito client after it has been paused (see method\n\"pause\"). If there are any queued actions that were executed and\ncached during the pause, calling resume() will immediately execute\nthem. All binders are notified through their onResume() function that\nthey are been resumed.", "guessedname": "resume", "guessedtype": "function"}, "attachBinders": {"guessedname": "attachBinders", "params": [{"type": "Object", "name": "binderMap", "description": " viewId ==> binder data, contains all we\nneed from the mojit dispatch's meta object about all the binders\nthat were executed to create the DOM addition recently added to\nthe document."}, {"type": "string", "name": "parentId", "description": " the parent binder view id to attach any\nchildren."}, {"type": "string", "name": "topLevelMojitViewId", "description": " the topmost (root) binder view\nid to attach as a child to the parent."}], "description": "Given a set of binder information, initialize binder instances and\nbind them to the page.", "private": "", "guessedtype": "function"}}, "file": "mojito-client.client.js", "shortname": "Client", "properties": {"prototype": {"param": "{Object} data The data for the event. (Empty in this case).", "description": "Fired after the binders are attached to the page.", "guessedname": "prototype", "guessedtype": "property"}}, "description": "The starting point for mojito to run in the browser. You can access one\ninstance of the Mojito Client running within the browser environment\nthrough window.YMojito.client."}, "Cookie.server": {"name": "Cookie.server", "namespace": "", "module": "ActionContextAddon", "methods": {"set": {"params": [{"type": "string", "name": "key", "description": " The key to use."}, {"type": "string", "name": "val", "description": " The value that will be set."}], "description": "Set a cookie on the given key with the given value", "guessedname": "set", "guessedtype": "function"}, "get": {"params": [{"type": "string", "name": "[optional]", "description": " key The key to look for."}], "description": "Returns the cookie for the given key, or all cookies if the key is\nnot specified.", "guessedname": "get", "guessedtype": "function"}}, "file": "cookie.server.js", "shortname": "Cookie.server", "description": "<strong>Access point:</strong> <em>ac.cookie.*</em>\nThis server-side cookie add-on allows you to easily use cookies."}, "Device.common": {"name": "Device.common", "namespace": "", "module": "ActionContextAddon", "methods": {"get": {"return": {"type": "object", "description": "The value of the named attribute."}, "params": [{"type": "string", "name": "attribute", "description": " The name of the catalog attribute e.g\n\"make\" or \"model\"."}], "description": "Returns the attribute of the catalog for the device\nthis request was intiated from.", "guessedname": "get", "guessedtype": "function"}}, "file": "device.server.js", "shortname": "Device.common", "description": "<strong>Access point:</strong> <em>ac.device.get()</em>\nDevice catalog addon"}, "MojitoDispatcher": {"name": "MojitoDispatcher", "constructors": [{"params": [{"type": "ServerStore", "name": "resourceStore", "description": " the store to use."}], "description": "This object is responsible for running mojits."}], "namespace": "", "module": "ActionContext", "private": "", "file": "dispatch.common.js", "shortname": "MojitoDispatcher", "description": "This object is responsible for running mojits."}, "Params.common": {"name": "Params.common", "namespace": "", "module": "ActionContextAddon", "methods": {"body": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Alias for 'getFromBody'.", "guessedname": "body", "guessedtype": "function"}, "getFromMerged": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Gets all params merged into one object. Route -> URL -> Body\nprecedence.", "guessedname": "getFromMerged", "guessedtype": "function"}, "all": {"return": {"type": "object", "description": "all params."}, "description": "Alias for 'getAll'.", "guessedname": "all", "guessedtype": "function"}, "getFromBody": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Gets body parameters", "guessedname": "getFromBody", "guessedtype": "function"}, "getFromUrl": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Gets URL parameters", "guessedname": "getFromUrl", "guessedtype": "function"}, "url": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Alias for 'getFromUrl'.", "guessedname": "url", "guessedtype": "function"}, "route": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Alias for 'getFromRoute'.", "guessedname": "route", "guessedtype": "function"}, "getAll": {"return": {"type": "object", "description": "all params."}, "description": "Gets all params, keyed by 'route', 'url', 'body', and 'file'.", "guessedname": "getAll", "guessedtype": "function"}, "getFromFiles": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "description": "Gets file parameters", "private": "", "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "guessedname": "getFromFiles", "guessedtype": "function"}, "getFromRoute": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter."}], "description": "Gets route parameters", "guessedname": "getFromRoute", "guessedtype": "function"}, "files": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Alias for 'getFromFiles'.", "guessedname": "files", "guessedtype": "function"}, "merged": {"return": {"type": "string|object", "description": "param value, or all params if no key\nspecified."}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required."}], "description": "Alias for 'getFromMerged'.", "guessedname": "merged", "guessedtype": "function"}}, "file": "params.common.js", "shortname": "Params.common", "description": "<strong>Access point:</strong> <em>ac.params.*</em>\nAddon that provides access to any parameters given to the system"}, "Composite.common": {"name": "Composite.common", "namespace": "", "module": "ActionContextAddon", "methods": {"execute": {"params": [{"type": "object", "name": "cfg", "description": " The configuration object to be used."}, {"type": "function", "name": "cb", "description": " The callback that will be called."}], "description": "This method requires an explicit config object and returns\na RMP compliant object via a callback.\n<pre>\ncfg = {\nchildren: {\nslot-1: {\ntype: \"default\",\naction: \"index\"\n},\nslot-2: {\ntype: \"default\",\naction: \"index\",\nparams: {\nroute: {},\nurl: {},\nbody: {},\nfile: {}\n}\n}\n},\nassets: {}\n}\n</pre>\nThe \"callback\" is an object containg the child slots with its\nrendered data.\n<pre>\ncallback({\nslot-1: <string>,\nslot-2: <string>\n},\n{\nhttp: {}\nassets: {}\n})\n</pre>", "guessedname": "execute", "guessedtype": "function"}, "done": {"params": [{"type": "object", "name": "opts", "description": " The configuration object to be used.\n<em>template<em> can be used to provide additional\nview template values."}], "description": "Automatically dispatches all the children of this mojit and collects\ntheir executed values into the view template, keyed by the child's\nname within the mojit's configuration. For example, given the mojit\nspec:\n<pre>\n\"specs\": {\n\"parent\": {\n\"type\": \"MyCompositeMojit\",\n\"config\": {\n\"children\": {\n\"foo\": {\n\"type\": \"FooMojit\"\n},\n\"bar\": {\n\"type\": \"BarMojit\"\n}\n}\n}\n}\n}\n</pre>\nAnd given the view template:\n<pre>\n&lt;div id=&quot;{{mojit_view_id}}&quot;&gt;\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;div class=&quot;fooslot&quot;&gt;\n{{{foo}}}\n&lt;/div&gt;\n&lt;div class=&quot;barslot&quot;&gt;\n{{{bar}}}\n&lt;/div&gt;\n&lt;/div&gt;\n</pre>\nAnd the controller:\n<pre>\nY.mojito.controller = {\nindex: function(ac) {\nac.composite.done({\ntemplate: { title: 'Hello there' } // for the view only\n});\n}\n};\n</pre>\nThis will execute the child intances of the \"FooMojit\" and\n\"BarMojit\", returning their rendered values into the parent's view\ntemplate, thus rendering the full parent view including the children.\nAll the parent parameters are passed along to children.", "guessedname": "done", "guessedtype": "function"}}, "file": "composite.common.js", "shortname": "Composite.common", "description": "<strong>Access point:</strong> <em>ac.composite.*</em>\nProvides methods for working with many Mojits."}, "Config.common": {"name": "Config.common", "namespace": "", "module": "ActionContextAddon", "methods": {"getDefinition": {"return": {"type": "Object|Array|String", "description": "The requested definition values."}, "params": [{"type": "String", "name": "key", "description": " A period separated key path to look for i.e.\n\"get.my.value\"."}, {"type": "Object|Array|String", "name": "def", "description": " The default value to use if no match\nwas found."}], "description": "Access definition values.", "guessedname": "getDefinition", "guessedtype": "function"}, "get": {"return": {"type": "Object|Array|String", "description": "The requested configuration value."}, "params": [{"type": "String", "name": "key", "description": " A period separated key path to look for i.e.\n\"get.my.value\"."}, {"type": "Object|Array|String", "name": "def", "description": " The default value to use if no match\nwas found."}], "description": "Access config values.", "guessedname": "get", "guessedtype": "function"}}, "file": "config.common.js", "shortname": "Config.common", "description": "<strong>Access point:</strong> <em>ac.config.*</em>\nProvides access to the Mojits configuration"}, "Assets.common": {"name": "Assets.common", "namespace": "", "module": "ActionContextAddon", "methods": {"getUrl": {"guessedname": "getUrl", "guessedtype": "function"}, "preLoadImage": {"guessedname": "preLoadImage", "guessedtype": "function"}, "addAssets": {"guessedname": "addAssets", "guessedtype": "function"}, "mergeMetaInto": {"guessedname": "mergeMetaInto", "guessedtype": "function"}, "addBlob": {"params": [{"type": "string", "name": "content", "description": " A string of data."}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\"."}], "description": "Method for adding a Blob of data to the page. This can be used\nfor adding custom \"script\" or \"style\" blocks.", "guessedname": "addBlob", "guessedtype": "function"}, "preLoadImages": {"guessedname": "preLoadImages", "guessedtype": "function"}, "mixAssets": {"guessedname": "mixAssets", "guessedtype": "function"}, "addAsset": {"guessedname": "addAsset", "guessedtype": "function"}, "addCss": {"params": [{"type": "string", "name": "link", "description": " A URL (./local.css converts to\n/static/mojit_type/assets/local.css)."}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\"."}], "description": "Method for adding a JS file to the page.", "guessedname": "addCss", "guessedtype": "function"}, "addJs": {"params": [{"type": "string", "name": "link", "description": " A URL (./local.css converts to\n/static/mojit_type/assets/local.css)."}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\"."}], "description": "Method for adding a JS file to the page.", "guessedname": "addJs", "guessedtype": "function"}, "getAssets": {"guessedname": "getAssets", "guessedtype": "function"}}, "file": "assets.common.js", "shortname": "Assets.common", "description": "<strong>Access point:</strong> <em>ac.assets.*</em>\nProvides methods for adding HTML assets to a page."}, "Carrier.common": {"name": "Carrier.common", "namespace": "", "module": "ActionContextAddon", "methods": {"get": {"return": {"type": "object", "description": "The catalog attribute value."}, "params": [{"type": "string", "name": "attribute", "description": " The name of the catalog attribute e.g\n\"ticker\"."}], "description": "Returns the attribute of the catalog for the current carrier used for\nthis request.", "guessedname": "get", "guessedtype": "function"}}, "file": "carrier.server.js", "shortname": "Carrier.common", "description": "<strong>Access point:</strong> <em>ac.carrier.get()</em>\nCarrier catalog addon"}, "Analytics.common": {"name": "Analytics.common", "namespace": "", "module": "ActionContextAddon", "methods": {"retrieve": {"params": [{"type": "function", "name": "cb", "description": " callback invoked with the analytics object."}, {"type": "object", "name": "[optional]", "description": " scope scope of the callback."}], "description": "To retrieve analytics data that has been stored by child mojits, call\nthis function and provide a function, which will be called once the\nchildren have been dispatched and all their analytics data has been\nmerged.", "guessedname": "retrieve", "guessedtype": "function"}, "setMergeFunction": {"params": [{"type": "function", "name": "fn", "description": " user-defined merge function, which should accept\ntwo objects, the first is \"to\", and the second is \"from\". this\nfunction should return the merged object."}], "description": "Allows a way for addons mixed in after this one to set an alternate\ndata merge function when analytics from multiple children are\ncombined. The default merge function is the same one used internally\nby Mojito to merge meta data, and will be sufficient for most use\ncases.", "guessedname": "setMergeFunction", "guessedtype": "function"}, "store": {"params": [{"type": "object", "name": "val", "description": " An object bag full of whatever you wish."}], "description": "Store an analytic value. This function can be called multiple times\nwithin a mojit, and uses a merging function to combine objects.", "guessedname": "store", "guessedtype": "function"}}, "file": "analytics.common.js", "shortname": "Analytics.common", "description": "<strong>Access point:</strong> <em>ac.analytics.*</em>\nProvides an easy way to stash analytics information within child mojits\nand retrieve them within parent after the children have been executed.\nData handled by this addon, however, cannot be used to augment the\nnormal data flow. IE: you cannot retrieve analytics data and then call\nac.done()."}, "MuAdapterServer": {"name": "MuAdapterServer", "namespace": "", "module": "ActionContextAddon", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": " The data to render."}, {"type": "string", "name": "mojitType", "description": " The name of the mojit type."}, {"type": "string", "name": "tmpl", "description": " The name of the template to render."}, {"type": "object", "name": "adapter", "description": " The output adapter to use."}, {"type": "object", "name": "meta", "description": " Optional metadata."}, {"type": "boolean", "name": "more", "description": " Whether there will be more content later."}], "description": "Renders the mustache template using the data provided.", "guessedname": "render", "guessedtype": "function"}}, "private": "", "file": "mu.server.js", "shortname": "MuAdapterServer", "description": "Class text."}}, "version": "0.1.0", "namespaces": ["Y.mojito", "Y.mojito.lib"]}